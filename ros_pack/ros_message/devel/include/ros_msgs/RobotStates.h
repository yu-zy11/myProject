// Generated by gencpp from file ros_msgs/RobotStates.msg
// DO NOT EDIT!


#ifndef ROS_MSGS_MESSAGE_ROBOTSTATES_H
#define ROS_MSGS_MESSAGE_ROBOTSTATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ros_msgs
{
template <class ContainerAllocator>
struct RobotStates_
{
  typedef RobotStates_<ContainerAllocator> Type;

  RobotStates_()
    : header()
    , body_position()
    , body_linear_velocity_in_world()
    , body_linear_velocity_in_body()
    , body_acceleration_in_body()
    , body_euler()
    , body_quaternion()
    , body_angular_velocity_in_world()
    , body_angular_velocity_in_body()
    , rotation_matrix_body_to_world()
    , joint_position()
    , joint_velocity()
    , torque_reading()
    , joint_acceleration()
    , foot_contact_force()
    , foot_contact_detected()
    , foot_contact_probability()
    , foot_position_in_body()
    , foot_velocity_in_body()
    , foot_jacobian_in_body()  {
      body_position.assign(0.0);

      body_linear_velocity_in_world.assign(0.0);

      body_linear_velocity_in_body.assign(0.0);

      body_acceleration_in_body.assign(0.0);

      body_euler.assign(0.0);

      body_quaternion.assign(0.0);

      body_angular_velocity_in_world.assign(0.0);

      body_angular_velocity_in_body.assign(0.0);

      rotation_matrix_body_to_world.assign(0.0);

      joint_position.assign(0.0);

      joint_velocity.assign(0.0);

      torque_reading.assign(0.0);

      joint_acceleration.assign(0.0);

      foot_contact_force.assign(0.0);

      foot_contact_detected.assign(0);

      foot_contact_probability.assign(0.0);

      foot_position_in_body.assign(0.0);

      foot_velocity_in_body.assign(0.0);

      foot_jacobian_in_body.assign(0.0);
  }
  RobotStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , body_position()
    , body_linear_velocity_in_world()
    , body_linear_velocity_in_body()
    , body_acceleration_in_body()
    , body_euler()
    , body_quaternion()
    , body_angular_velocity_in_world()
    , body_angular_velocity_in_body()
    , rotation_matrix_body_to_world()
    , joint_position()
    , joint_velocity()
    , torque_reading()
    , joint_acceleration()
    , foot_contact_force()
    , foot_contact_detected()
    , foot_contact_probability()
    , foot_position_in_body()
    , foot_velocity_in_body()
    , foot_jacobian_in_body()  {
  (void)_alloc;
      body_position.assign(0.0);

      body_linear_velocity_in_world.assign(0.0);

      body_linear_velocity_in_body.assign(0.0);

      body_acceleration_in_body.assign(0.0);

      body_euler.assign(0.0);

      body_quaternion.assign(0.0);

      body_angular_velocity_in_world.assign(0.0);

      body_angular_velocity_in_body.assign(0.0);

      rotation_matrix_body_to_world.assign(0.0);

      joint_position.assign(0.0);

      joint_velocity.assign(0.0);

      torque_reading.assign(0.0);

      joint_acceleration.assign(0.0);

      foot_contact_force.assign(0.0);

      foot_contact_detected.assign(0);

      foot_contact_probability.assign(0.0);

      foot_position_in_body.assign(0.0);

      foot_velocity_in_body.assign(0.0);

      foot_jacobian_in_body.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 3>  _body_position_type;
  _body_position_type body_position;

   typedef boost::array<float, 3>  _body_linear_velocity_in_world_type;
  _body_linear_velocity_in_world_type body_linear_velocity_in_world;

   typedef boost::array<float, 3>  _body_linear_velocity_in_body_type;
  _body_linear_velocity_in_body_type body_linear_velocity_in_body;

   typedef boost::array<float, 3>  _body_acceleration_in_body_type;
  _body_acceleration_in_body_type body_acceleration_in_body;

   typedef boost::array<float, 3>  _body_euler_type;
  _body_euler_type body_euler;

   typedef boost::array<float, 4>  _body_quaternion_type;
  _body_quaternion_type body_quaternion;

   typedef boost::array<float, 3>  _body_angular_velocity_in_world_type;
  _body_angular_velocity_in_world_type body_angular_velocity_in_world;

   typedef boost::array<float, 3>  _body_angular_velocity_in_body_type;
  _body_angular_velocity_in_body_type body_angular_velocity_in_body;

   typedef boost::array<float, 9>  _rotation_matrix_body_to_world_type;
  _rotation_matrix_body_to_world_type rotation_matrix_body_to_world;

   typedef boost::array<float, 12>  _joint_position_type;
  _joint_position_type joint_position;

   typedef boost::array<float, 12>  _joint_velocity_type;
  _joint_velocity_type joint_velocity;

   typedef boost::array<float, 12>  _torque_reading_type;
  _torque_reading_type torque_reading;

   typedef boost::array<float, 12>  _joint_acceleration_type;
  _joint_acceleration_type joint_acceleration;

   typedef boost::array<float, 4>  _foot_contact_force_type;
  _foot_contact_force_type foot_contact_force;

   typedef boost::array<int32_t, 4>  _foot_contact_detected_type;
  _foot_contact_detected_type foot_contact_detected;

   typedef boost::array<float, 4>  _foot_contact_probability_type;
  _foot_contact_probability_type foot_contact_probability;

   typedef boost::array<float, 12>  _foot_position_in_body_type;
  _foot_position_in_body_type foot_position_in_body;

   typedef boost::array<float, 12>  _foot_velocity_in_body_type;
  _foot_velocity_in_body_type foot_velocity_in_body;

   typedef boost::array<float, 144>  _foot_jacobian_in_body_type;
  _foot_jacobian_in_body_type foot_jacobian_in_body;





  typedef boost::shared_ptr< ::ros_msgs::RobotStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_msgs::RobotStates_<ContainerAllocator> const> ConstPtr;

}; // struct RobotStates_

typedef ::ros_msgs::RobotStates_<std::allocator<void> > RobotStates;

typedef boost::shared_ptr< ::ros_msgs::RobotStates > RobotStatesPtr;
typedef boost::shared_ptr< ::ros_msgs::RobotStates const> RobotStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_msgs::RobotStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_msgs::RobotStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_msgs::RobotStates_<ContainerAllocator1> & lhs, const ::ros_msgs::RobotStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.body_position == rhs.body_position &&
    lhs.body_linear_velocity_in_world == rhs.body_linear_velocity_in_world &&
    lhs.body_linear_velocity_in_body == rhs.body_linear_velocity_in_body &&
    lhs.body_acceleration_in_body == rhs.body_acceleration_in_body &&
    lhs.body_euler == rhs.body_euler &&
    lhs.body_quaternion == rhs.body_quaternion &&
    lhs.body_angular_velocity_in_world == rhs.body_angular_velocity_in_world &&
    lhs.body_angular_velocity_in_body == rhs.body_angular_velocity_in_body &&
    lhs.rotation_matrix_body_to_world == rhs.rotation_matrix_body_to_world &&
    lhs.joint_position == rhs.joint_position &&
    lhs.joint_velocity == rhs.joint_velocity &&
    lhs.torque_reading == rhs.torque_reading &&
    lhs.joint_acceleration == rhs.joint_acceleration &&
    lhs.foot_contact_force == rhs.foot_contact_force &&
    lhs.foot_contact_detected == rhs.foot_contact_detected &&
    lhs.foot_contact_probability == rhs.foot_contact_probability &&
    lhs.foot_position_in_body == rhs.foot_position_in_body &&
    lhs.foot_velocity_in_body == rhs.foot_velocity_in_body &&
    lhs.foot_jacobian_in_body == rhs.foot_jacobian_in_body;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_msgs::RobotStates_<ContainerAllocator1> & lhs, const ::ros_msgs::RobotStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_msgs::RobotStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_msgs::RobotStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_msgs::RobotStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_msgs::RobotStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_msgs::RobotStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_msgs::RobotStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_msgs::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a8b0d3c2e9f9adf1e85eb4959a9e0667";
  }

  static const char* value(const ::ros_msgs::RobotStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa8b0d3c2e9f9adf1ULL;
  static const uint64_t static_value2 = 0xe85eb4959a9e0667ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_msgs::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_msgs/RobotStates";
  }

  static const char* value(const ::ros_msgs::RobotStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_msgs::RobotStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[3] body_position\n"
"float32[3] body_linear_velocity_in_world\n"
"float32[3] body_linear_velocity_in_body\n"
"float32[3] body_acceleration_in_body\n"
"float32[3] body_euler\n"
"float32[4] body_quaternion\n"
"float32[3] body_angular_velocity_in_world\n"
"float32[3] body_angular_velocity_in_body\n"
"float32[9] rotation_matrix_body_to_world\n"
"float32[12] joint_position\n"
"float32[12] joint_velocity\n"
"float32[12] torque_reading\n"
"float32[12] joint_acceleration\n"
"float32[4] foot_contact_force\n"
"int32[4] foot_contact_detected\n"
"float32[4] foot_contact_probability\n"
"float32[12] foot_position_in_body\n"
"float32[12] foot_velocity_in_body\n"
"float32[144] foot_jacobian_in_body\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::ros_msgs::RobotStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_msgs::RobotStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.body_position);
      stream.next(m.body_linear_velocity_in_world);
      stream.next(m.body_linear_velocity_in_body);
      stream.next(m.body_acceleration_in_body);
      stream.next(m.body_euler);
      stream.next(m.body_quaternion);
      stream.next(m.body_angular_velocity_in_world);
      stream.next(m.body_angular_velocity_in_body);
      stream.next(m.rotation_matrix_body_to_world);
      stream.next(m.joint_position);
      stream.next(m.joint_velocity);
      stream.next(m.torque_reading);
      stream.next(m.joint_acceleration);
      stream.next(m.foot_contact_force);
      stream.next(m.foot_contact_detected);
      stream.next(m.foot_contact_probability);
      stream.next(m.foot_position_in_body);
      stream.next(m.foot_velocity_in_body);
      stream.next(m.foot_jacobian_in_body);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_msgs::RobotStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_msgs::RobotStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "body_position[]" << std::endl;
    for (size_t i = 0; i < v.body_position.size(); ++i)
    {
      s << indent << "  body_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_position[i]);
    }
    s << indent << "body_linear_velocity_in_world[]" << std::endl;
    for (size_t i = 0; i < v.body_linear_velocity_in_world.size(); ++i)
    {
      s << indent << "  body_linear_velocity_in_world[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_linear_velocity_in_world[i]);
    }
    s << indent << "body_linear_velocity_in_body[]" << std::endl;
    for (size_t i = 0; i < v.body_linear_velocity_in_body.size(); ++i)
    {
      s << indent << "  body_linear_velocity_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_linear_velocity_in_body[i]);
    }
    s << indent << "body_acceleration_in_body[]" << std::endl;
    for (size_t i = 0; i < v.body_acceleration_in_body.size(); ++i)
    {
      s << indent << "  body_acceleration_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_acceleration_in_body[i]);
    }
    s << indent << "body_euler[]" << std::endl;
    for (size_t i = 0; i < v.body_euler.size(); ++i)
    {
      s << indent << "  body_euler[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_euler[i]);
    }
    s << indent << "body_quaternion[]" << std::endl;
    for (size_t i = 0; i < v.body_quaternion.size(); ++i)
    {
      s << indent << "  body_quaternion[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_quaternion[i]);
    }
    s << indent << "body_angular_velocity_in_world[]" << std::endl;
    for (size_t i = 0; i < v.body_angular_velocity_in_world.size(); ++i)
    {
      s << indent << "  body_angular_velocity_in_world[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_angular_velocity_in_world[i]);
    }
    s << indent << "body_angular_velocity_in_body[]" << std::endl;
    for (size_t i = 0; i < v.body_angular_velocity_in_body.size(); ++i)
    {
      s << indent << "  body_angular_velocity_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.body_angular_velocity_in_body[i]);
    }
    s << indent << "rotation_matrix_body_to_world[]" << std::endl;
    for (size_t i = 0; i < v.rotation_matrix_body_to_world.size(); ++i)
    {
      s << indent << "  rotation_matrix_body_to_world[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rotation_matrix_body_to_world[i]);
    }
    s << indent << "joint_position[]" << std::endl;
    for (size_t i = 0; i < v.joint_position.size(); ++i)
    {
      s << indent << "  joint_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_position[i]);
    }
    s << indent << "joint_velocity[]" << std::endl;
    for (size_t i = 0; i < v.joint_velocity.size(); ++i)
    {
      s << indent << "  joint_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_velocity[i]);
    }
    s << indent << "torque_reading[]" << std::endl;
    for (size_t i = 0; i < v.torque_reading.size(); ++i)
    {
      s << indent << "  torque_reading[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.torque_reading[i]);
    }
    s << indent << "joint_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.joint_acceleration.size(); ++i)
    {
      s << indent << "  joint_acceleration[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_acceleration[i]);
    }
    s << indent << "foot_contact_force[]" << std::endl;
    for (size_t i = 0; i < v.foot_contact_force.size(); ++i)
    {
      s << indent << "  foot_contact_force[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_contact_force[i]);
    }
    s << indent << "foot_contact_detected[]" << std::endl;
    for (size_t i = 0; i < v.foot_contact_detected.size(); ++i)
    {
      s << indent << "  foot_contact_detected[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.foot_contact_detected[i]);
    }
    s << indent << "foot_contact_probability[]" << std::endl;
    for (size_t i = 0; i < v.foot_contact_probability.size(); ++i)
    {
      s << indent << "  foot_contact_probability[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_contact_probability[i]);
    }
    s << indent << "foot_position_in_body[]" << std::endl;
    for (size_t i = 0; i < v.foot_position_in_body.size(); ++i)
    {
      s << indent << "  foot_position_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_position_in_body[i]);
    }
    s << indent << "foot_velocity_in_body[]" << std::endl;
    for (size_t i = 0; i < v.foot_velocity_in_body.size(); ++i)
    {
      s << indent << "  foot_velocity_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_velocity_in_body[i]);
    }
    s << indent << "foot_jacobian_in_body[]" << std::endl;
    for (size_t i = 0; i < v.foot_jacobian_in_body.size(); ++i)
    {
      s << indent << "  foot_jacobian_in_body[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_jacobian_in_body[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_MSGS_MESSAGE_ROBOTSTATES_H
