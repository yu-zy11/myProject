; Auto-generated. Do not edit!


(cl:in-package ros_msgs-msg)


;//! \htmlinclude RobotStates.msg.html

(cl:defclass <RobotStates> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (body_position
    :reader body_position
    :initarg :body_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_linear_velocity_in_world
    :reader body_linear_velocity_in_world
    :initarg :body_linear_velocity_in_world
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_linear_velocity_in_body
    :reader body_linear_velocity_in_body
    :initarg :body_linear_velocity_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_acceleration_in_body
    :reader body_acceleration_in_body
    :initarg :body_acceleration_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_euler
    :reader body_euler
    :initarg :body_euler
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_quaternion
    :reader body_quaternion
    :initarg :body_quaternion
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (body_angular_velocity_in_world
    :reader body_angular_velocity_in_world
    :initarg :body_angular_velocity_in_world
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (body_angular_velocity_in_body
    :reader body_angular_velocity_in_body
    :initarg :body_angular_velocity_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 3 :element-type 'cl:float :initial-element 0.0))
   (rotation_matrix_body_to_world
    :reader rotation_matrix_body_to_world
    :initarg :rotation_matrix_body_to_world
    :type (cl:vector cl:float)
   :initform (cl:make-array 9 :element-type 'cl:float :initial-element 0.0))
   (joint_position
    :reader joint_position
    :initarg :joint_position
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (joint_velocity
    :reader joint_velocity
    :initarg :joint_velocity
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (torque_reading
    :reader torque_reading
    :initarg :torque_reading
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (joint_acceleration
    :reader joint_acceleration
    :initarg :joint_acceleration
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (foot_contact_force
    :reader foot_contact_force
    :initarg :foot_contact_force
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (foot_contact_detected
    :reader foot_contact_detected
    :initarg :foot_contact_detected
    :type (cl:vector cl:integer)
   :initform (cl:make-array 4 :element-type 'cl:integer :initial-element 0))
   (foot_contact_probability
    :reader foot_contact_probability
    :initarg :foot_contact_probability
    :type (cl:vector cl:float)
   :initform (cl:make-array 4 :element-type 'cl:float :initial-element 0.0))
   (foot_position_in_body
    :reader foot_position_in_body
    :initarg :foot_position_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (foot_velocity_in_body
    :reader foot_velocity_in_body
    :initarg :foot_velocity_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 12 :element-type 'cl:float :initial-element 0.0))
   (foot_jacobian_in_body
    :reader foot_jacobian_in_body
    :initarg :foot_jacobian_in_body
    :type (cl:vector cl:float)
   :initform (cl:make-array 144 :element-type 'cl:float :initial-element 0.0)))
)

(cl:defclass RobotStates (<RobotStates>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <RobotStates>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'RobotStates)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name ros_msgs-msg:<RobotStates> is deprecated: use ros_msgs-msg:RobotStates instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:header-val is deprecated.  Use ros_msgs-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'body_position-val :lambda-list '(m))
(cl:defmethod body_position-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_position-val is deprecated.  Use ros_msgs-msg:body_position instead.")
  (body_position m))

(cl:ensure-generic-function 'body_linear_velocity_in_world-val :lambda-list '(m))
(cl:defmethod body_linear_velocity_in_world-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_linear_velocity_in_world-val is deprecated.  Use ros_msgs-msg:body_linear_velocity_in_world instead.")
  (body_linear_velocity_in_world m))

(cl:ensure-generic-function 'body_linear_velocity_in_body-val :lambda-list '(m))
(cl:defmethod body_linear_velocity_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_linear_velocity_in_body-val is deprecated.  Use ros_msgs-msg:body_linear_velocity_in_body instead.")
  (body_linear_velocity_in_body m))

(cl:ensure-generic-function 'body_acceleration_in_body-val :lambda-list '(m))
(cl:defmethod body_acceleration_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_acceleration_in_body-val is deprecated.  Use ros_msgs-msg:body_acceleration_in_body instead.")
  (body_acceleration_in_body m))

(cl:ensure-generic-function 'body_euler-val :lambda-list '(m))
(cl:defmethod body_euler-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_euler-val is deprecated.  Use ros_msgs-msg:body_euler instead.")
  (body_euler m))

(cl:ensure-generic-function 'body_quaternion-val :lambda-list '(m))
(cl:defmethod body_quaternion-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_quaternion-val is deprecated.  Use ros_msgs-msg:body_quaternion instead.")
  (body_quaternion m))

(cl:ensure-generic-function 'body_angular_velocity_in_world-val :lambda-list '(m))
(cl:defmethod body_angular_velocity_in_world-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_angular_velocity_in_world-val is deprecated.  Use ros_msgs-msg:body_angular_velocity_in_world instead.")
  (body_angular_velocity_in_world m))

(cl:ensure-generic-function 'body_angular_velocity_in_body-val :lambda-list '(m))
(cl:defmethod body_angular_velocity_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:body_angular_velocity_in_body-val is deprecated.  Use ros_msgs-msg:body_angular_velocity_in_body instead.")
  (body_angular_velocity_in_body m))

(cl:ensure-generic-function 'rotation_matrix_body_to_world-val :lambda-list '(m))
(cl:defmethod rotation_matrix_body_to_world-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:rotation_matrix_body_to_world-val is deprecated.  Use ros_msgs-msg:rotation_matrix_body_to_world instead.")
  (rotation_matrix_body_to_world m))

(cl:ensure-generic-function 'joint_position-val :lambda-list '(m))
(cl:defmethod joint_position-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:joint_position-val is deprecated.  Use ros_msgs-msg:joint_position instead.")
  (joint_position m))

(cl:ensure-generic-function 'joint_velocity-val :lambda-list '(m))
(cl:defmethod joint_velocity-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:joint_velocity-val is deprecated.  Use ros_msgs-msg:joint_velocity instead.")
  (joint_velocity m))

(cl:ensure-generic-function 'torque_reading-val :lambda-list '(m))
(cl:defmethod torque_reading-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:torque_reading-val is deprecated.  Use ros_msgs-msg:torque_reading instead.")
  (torque_reading m))

(cl:ensure-generic-function 'joint_acceleration-val :lambda-list '(m))
(cl:defmethod joint_acceleration-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:joint_acceleration-val is deprecated.  Use ros_msgs-msg:joint_acceleration instead.")
  (joint_acceleration m))

(cl:ensure-generic-function 'foot_contact_force-val :lambda-list '(m))
(cl:defmethod foot_contact_force-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_contact_force-val is deprecated.  Use ros_msgs-msg:foot_contact_force instead.")
  (foot_contact_force m))

(cl:ensure-generic-function 'foot_contact_detected-val :lambda-list '(m))
(cl:defmethod foot_contact_detected-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_contact_detected-val is deprecated.  Use ros_msgs-msg:foot_contact_detected instead.")
  (foot_contact_detected m))

(cl:ensure-generic-function 'foot_contact_probability-val :lambda-list '(m))
(cl:defmethod foot_contact_probability-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_contact_probability-val is deprecated.  Use ros_msgs-msg:foot_contact_probability instead.")
  (foot_contact_probability m))

(cl:ensure-generic-function 'foot_position_in_body-val :lambda-list '(m))
(cl:defmethod foot_position_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_position_in_body-val is deprecated.  Use ros_msgs-msg:foot_position_in_body instead.")
  (foot_position_in_body m))

(cl:ensure-generic-function 'foot_velocity_in_body-val :lambda-list '(m))
(cl:defmethod foot_velocity_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_velocity_in_body-val is deprecated.  Use ros_msgs-msg:foot_velocity_in_body instead.")
  (foot_velocity_in_body m))

(cl:ensure-generic-function 'foot_jacobian_in_body-val :lambda-list '(m))
(cl:defmethod foot_jacobian_in_body-val ((m <RobotStates>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader ros_msgs-msg:foot_jacobian_in_body-val is deprecated.  Use ros_msgs-msg:foot_jacobian_in_body instead.")
  (foot_jacobian_in_body m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <RobotStates>) ostream)
  "Serializes a message object of type '<RobotStates>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_linear_velocity_in_world))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_linear_velocity_in_body))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_acceleration_in_body))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_euler))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_quaternion))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_angular_velocity_in_world))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'body_angular_velocity_in_body))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'rotation_matrix_body_to_world))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'joint_position))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'joint_velocity))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'torque_reading))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'joint_acceleration))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'foot_contact_force))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let* ((signed ele) (unsigned (cl:if (cl:< signed 0) (cl:+ signed 4294967296) signed)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) unsigned) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) unsigned) ostream)
    ))
   (cl:slot-value msg 'foot_contact_detected))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'foot_contact_probability))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'foot_position_in_body))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'foot_velocity_in_body))
  (cl:map cl:nil #'(cl:lambda (ele) (cl:let ((bits (roslisp-utils:encode-single-float-bits ele)))
    (cl:write-byte (cl:ldb (cl:byte 8 0) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) bits) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) bits) ostream)))
   (cl:slot-value msg 'foot_jacobian_in_body))
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <RobotStates>) istream)
  "Deserializes a message object of type '<RobotStates>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
  (cl:setf (cl:slot-value msg 'body_position) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_position)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_linear_velocity_in_world) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_linear_velocity_in_world)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_linear_velocity_in_body) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_linear_velocity_in_body)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_acceleration_in_body) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_acceleration_in_body)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_euler) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_euler)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_quaternion) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'body_quaternion)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_angular_velocity_in_world) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_angular_velocity_in_world)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'body_angular_velocity_in_body) (cl:make-array 3))
  (cl:let ((vals (cl:slot-value msg 'body_angular_velocity_in_body)))
    (cl:dotimes (i 3)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'rotation_matrix_body_to_world) (cl:make-array 9))
  (cl:let ((vals (cl:slot-value msg 'rotation_matrix_body_to_world)))
    (cl:dotimes (i 9)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_position) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'joint_position)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_velocity) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'joint_velocity)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'torque_reading) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'torque_reading)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'joint_acceleration) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'joint_acceleration)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'foot_contact_force) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'foot_contact_force)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'foot_contact_detected) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'foot_contact_detected)))
    (cl:dotimes (i 4)
    (cl:let ((unsigned 0))
      (cl:setf (cl:ldb (cl:byte 8 0) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) unsigned) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) unsigned) (cl:read-byte istream))
      (cl:setf (cl:aref vals i) (cl:if (cl:< unsigned 2147483648) unsigned (cl:- unsigned 4294967296))))))
  (cl:setf (cl:slot-value msg 'foot_contact_probability) (cl:make-array 4))
  (cl:let ((vals (cl:slot-value msg 'foot_contact_probability)))
    (cl:dotimes (i 4)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'foot_position_in_body) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'foot_position_in_body)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'foot_velocity_in_body) (cl:make-array 12))
  (cl:let ((vals (cl:slot-value msg 'foot_velocity_in_body)))
    (cl:dotimes (i 12)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  (cl:setf (cl:slot-value msg 'foot_jacobian_in_body) (cl:make-array 144))
  (cl:let ((vals (cl:slot-value msg 'foot_jacobian_in_body)))
    (cl:dotimes (i 144)
    (cl:let ((bits 0))
      (cl:setf (cl:ldb (cl:byte 8 0) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) bits) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) bits) (cl:read-byte istream))
    (cl:setf (cl:aref vals i) (roslisp-utils:decode-single-float-bits bits)))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<RobotStates>)))
  "Returns string type for a message object of type '<RobotStates>"
  "ros_msgs/RobotStates")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'RobotStates)))
  "Returns string type for a message object of type 'RobotStates"
  "ros_msgs/RobotStates")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<RobotStates>)))
  "Returns md5sum for a message object of type '<RobotStates>"
  "a8b0d3c2e9f9adf1e85eb4959a9e0667")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'RobotStates)))
  "Returns md5sum for a message object of type 'RobotStates"
  "a8b0d3c2e9f9adf1e85eb4959a9e0667")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<RobotStates>)))
  "Returns full string definition for message of type '<RobotStates>"
  (cl:format cl:nil "Header header~%float32[3] body_position~%float32[3] body_linear_velocity_in_world~%float32[3] body_linear_velocity_in_body~%float32[3] body_acceleration_in_body~%float32[3] body_euler~%float32[4] body_quaternion~%float32[3] body_angular_velocity_in_world~%float32[3] body_angular_velocity_in_body~%float32[9] rotation_matrix_body_to_world~%float32[12] joint_position~%float32[12] joint_velocity~%float32[12] torque_reading~%float32[12] joint_acceleration~%float32[4] foot_contact_force~%int32[4] foot_contact_detected~%float32[4] foot_contact_probability~%float32[12] foot_position_in_body~%float32[12] foot_velocity_in_body~%float32[144] foot_jacobian_in_body~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'RobotStates)))
  "Returns full string definition for message of type 'RobotStates"
  (cl:format cl:nil "Header header~%float32[3] body_position~%float32[3] body_linear_velocity_in_world~%float32[3] body_linear_velocity_in_body~%float32[3] body_acceleration_in_body~%float32[3] body_euler~%float32[4] body_quaternion~%float32[3] body_angular_velocity_in_world~%float32[3] body_angular_velocity_in_body~%float32[9] rotation_matrix_body_to_world~%float32[12] joint_position~%float32[12] joint_velocity~%float32[12] torque_reading~%float32[12] joint_acceleration~%float32[4] foot_contact_force~%int32[4] foot_contact_detected~%float32[4] foot_contact_probability~%float32[12] foot_position_in_body~%float32[12] foot_velocity_in_body~%float32[144] foot_jacobian_in_body~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <RobotStates>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_linear_velocity_in_world) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_linear_velocity_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_acceleration_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_euler) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_quaternion) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_angular_velocity_in_world) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'body_angular_velocity_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'rotation_matrix_body_to_world) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_position) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_velocity) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'torque_reading) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'joint_acceleration) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_contact_force) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_contact_detected) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_contact_probability) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_position_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_velocity_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
     0 (cl:reduce #'cl:+ (cl:slot-value msg 'foot_jacobian_in_body) :key #'(cl:lambda (ele) (cl:declare (cl:ignorable ele)) (cl:+ 4)))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <RobotStates>))
  "Converts a ROS message object to a list"
  (cl:list 'RobotStates
    (cl:cons ':header (header msg))
    (cl:cons ':body_position (body_position msg))
    (cl:cons ':body_linear_velocity_in_world (body_linear_velocity_in_world msg))
    (cl:cons ':body_linear_velocity_in_body (body_linear_velocity_in_body msg))
    (cl:cons ':body_acceleration_in_body (body_acceleration_in_body msg))
    (cl:cons ':body_euler (body_euler msg))
    (cl:cons ':body_quaternion (body_quaternion msg))
    (cl:cons ':body_angular_velocity_in_world (body_angular_velocity_in_world msg))
    (cl:cons ':body_angular_velocity_in_body (body_angular_velocity_in_body msg))
    (cl:cons ':rotation_matrix_body_to_world (rotation_matrix_body_to_world msg))
    (cl:cons ':joint_position (joint_position msg))
    (cl:cons ':joint_velocity (joint_velocity msg))
    (cl:cons ':torque_reading (torque_reading msg))
    (cl:cons ':joint_acceleration (joint_acceleration msg))
    (cl:cons ':foot_contact_force (foot_contact_force msg))
    (cl:cons ':foot_contact_detected (foot_contact_detected msg))
    (cl:cons ':foot_contact_probability (foot_contact_probability msg))
    (cl:cons ':foot_position_in_body (foot_position_in_body msg))
    (cl:cons ':foot_velocity_in_body (foot_velocity_in_body msg))
    (cl:cons ':foot_jacobian_in_body (foot_jacobian_in_body msg))
))
