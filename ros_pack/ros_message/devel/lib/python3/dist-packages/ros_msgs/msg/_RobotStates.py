# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ros_msgs/RobotStates.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class RobotStates(genpy.Message):
  _md5sum = "a8b0d3c2e9f9adf1e85eb4959a9e0667"
  _type = "ros_msgs/RobotStates"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
float32[3] body_position
float32[3] body_linear_velocity_in_world
float32[3] body_linear_velocity_in_body
float32[3] body_acceleration_in_body
float32[3] body_euler
float32[4] body_quaternion
float32[3] body_angular_velocity_in_world
float32[3] body_angular_velocity_in_body
float32[9] rotation_matrix_body_to_world
float32[12] joint_position
float32[12] joint_velocity
float32[12] torque_reading
float32[12] joint_acceleration
float32[4] foot_contact_force
int32[4] foot_contact_detected
float32[4] foot_contact_probability
float32[12] foot_position_in_body
float32[12] foot_velocity_in_body
float32[144] foot_jacobian_in_body

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','body_position','body_linear_velocity_in_world','body_linear_velocity_in_body','body_acceleration_in_body','body_euler','body_quaternion','body_angular_velocity_in_world','body_angular_velocity_in_body','rotation_matrix_body_to_world','joint_position','joint_velocity','torque_reading','joint_acceleration','foot_contact_force','foot_contact_detected','foot_contact_probability','foot_position_in_body','foot_velocity_in_body','foot_jacobian_in_body']
  _slot_types = ['std_msgs/Header','float32[3]','float32[3]','float32[3]','float32[3]','float32[3]','float32[4]','float32[3]','float32[3]','float32[9]','float32[12]','float32[12]','float32[12]','float32[12]','float32[4]','int32[4]','float32[4]','float32[12]','float32[12]','float32[144]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,body_position,body_linear_velocity_in_world,body_linear_velocity_in_body,body_acceleration_in_body,body_euler,body_quaternion,body_angular_velocity_in_world,body_angular_velocity_in_body,rotation_matrix_body_to_world,joint_position,joint_velocity,torque_reading,joint_acceleration,foot_contact_force,foot_contact_detected,foot_contact_probability,foot_position_in_body,foot_velocity_in_body,foot_jacobian_in_body

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStates, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.body_position is None:
        self.body_position = [0.] * 3
      if self.body_linear_velocity_in_world is None:
        self.body_linear_velocity_in_world = [0.] * 3
      if self.body_linear_velocity_in_body is None:
        self.body_linear_velocity_in_body = [0.] * 3
      if self.body_acceleration_in_body is None:
        self.body_acceleration_in_body = [0.] * 3
      if self.body_euler is None:
        self.body_euler = [0.] * 3
      if self.body_quaternion is None:
        self.body_quaternion = [0.] * 4
      if self.body_angular_velocity_in_world is None:
        self.body_angular_velocity_in_world = [0.] * 3
      if self.body_angular_velocity_in_body is None:
        self.body_angular_velocity_in_body = [0.] * 3
      if self.rotation_matrix_body_to_world is None:
        self.rotation_matrix_body_to_world = [0.] * 9
      if self.joint_position is None:
        self.joint_position = [0.] * 12
      if self.joint_velocity is None:
        self.joint_velocity = [0.] * 12
      if self.torque_reading is None:
        self.torque_reading = [0.] * 12
      if self.joint_acceleration is None:
        self.joint_acceleration = [0.] * 12
      if self.foot_contact_force is None:
        self.foot_contact_force = [0.] * 4
      if self.foot_contact_detected is None:
        self.foot_contact_detected = [0] * 4
      if self.foot_contact_probability is None:
        self.foot_contact_probability = [0.] * 4
      if self.foot_position_in_body is None:
        self.foot_position_in_body = [0.] * 12
      if self.foot_velocity_in_body is None:
        self.foot_velocity_in_body = [0.] * 12
      if self.foot_jacobian_in_body is None:
        self.foot_jacobian_in_body = [0.] * 144
    else:
      self.header = std_msgs.msg.Header()
      self.body_position = [0.] * 3
      self.body_linear_velocity_in_world = [0.] * 3
      self.body_linear_velocity_in_body = [0.] * 3
      self.body_acceleration_in_body = [0.] * 3
      self.body_euler = [0.] * 3
      self.body_quaternion = [0.] * 4
      self.body_angular_velocity_in_world = [0.] * 3
      self.body_angular_velocity_in_body = [0.] * 3
      self.rotation_matrix_body_to_world = [0.] * 9
      self.joint_position = [0.] * 12
      self.joint_velocity = [0.] * 12
      self.torque_reading = [0.] * 12
      self.joint_acceleration = [0.] * 12
      self.foot_contact_force = [0.] * 4
      self.foot_contact_detected = [0] * 4
      self.foot_contact_probability = [0.] * 4
      self.foot_position_in_body = [0.] * 12
      self.foot_velocity_in_body = [0.] * 12
      self.foot_jacobian_in_body = [0.] * 144

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3f().pack(*self.body_position))
      buff.write(_get_struct_3f().pack(*self.body_linear_velocity_in_world))
      buff.write(_get_struct_3f().pack(*self.body_linear_velocity_in_body))
      buff.write(_get_struct_3f().pack(*self.body_acceleration_in_body))
      buff.write(_get_struct_3f().pack(*self.body_euler))
      buff.write(_get_struct_4f().pack(*self.body_quaternion))
      buff.write(_get_struct_3f().pack(*self.body_angular_velocity_in_world))
      buff.write(_get_struct_3f().pack(*self.body_angular_velocity_in_body))
      buff.write(_get_struct_9f().pack(*self.rotation_matrix_body_to_world))
      buff.write(_get_struct_12f().pack(*self.joint_position))
      buff.write(_get_struct_12f().pack(*self.joint_velocity))
      buff.write(_get_struct_12f().pack(*self.torque_reading))
      buff.write(_get_struct_12f().pack(*self.joint_acceleration))
      buff.write(_get_struct_4f().pack(*self.foot_contact_force))
      buff.write(_get_struct_4i().pack(*self.foot_contact_detected))
      buff.write(_get_struct_4f().pack(*self.foot_contact_probability))
      buff.write(_get_struct_12f().pack(*self.foot_position_in_body))
      buff.write(_get_struct_12f().pack(*self.foot_velocity_in_body))
      buff.write(_get_struct_144f().pack(*self.foot_jacobian_in_body))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.body_position = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_linear_velocity_in_world = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_linear_velocity_in_body = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_acceleration_in_body = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_euler = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 16
      self.body_quaternion = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 12
      self.body_angular_velocity_in_world = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.body_angular_velocity_in_body = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 36
      self.rotation_matrix_body_to_world = _get_struct_9f().unpack(str[start:end])
      start = end
      end += 48
      self.joint_position = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.joint_velocity = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.torque_reading = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.joint_acceleration = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 16
      self.foot_contact_force = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 16
      self.foot_contact_detected = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 16
      self.foot_contact_probability = _get_struct_4f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_position_in_body = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 48
      self.foot_velocity_in_body = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 576
      self.foot_jacobian_in_body = _get_struct_144f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.body_position.tostring())
      buff.write(self.body_linear_velocity_in_world.tostring())
      buff.write(self.body_linear_velocity_in_body.tostring())
      buff.write(self.body_acceleration_in_body.tostring())
      buff.write(self.body_euler.tostring())
      buff.write(self.body_quaternion.tostring())
      buff.write(self.body_angular_velocity_in_world.tostring())
      buff.write(self.body_angular_velocity_in_body.tostring())
      buff.write(self.rotation_matrix_body_to_world.tostring())
      buff.write(self.joint_position.tostring())
      buff.write(self.joint_velocity.tostring())
      buff.write(self.torque_reading.tostring())
      buff.write(self.joint_acceleration.tostring())
      buff.write(self.foot_contact_force.tostring())
      buff.write(self.foot_contact_detected.tostring())
      buff.write(self.foot_contact_probability.tostring())
      buff.write(self.foot_position_in_body.tostring())
      buff.write(self.foot_velocity_in_body.tostring())
      buff.write(self.foot_jacobian_in_body.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 12
      self.body_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_linear_velocity_in_world = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_linear_velocity_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_acceleration_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_euler = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 16
      self.body_quaternion = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 12
      self.body_angular_velocity_in_world = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.body_angular_velocity_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 36
      self.rotation_matrix_body_to_world = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      start = end
      end += 48
      self.joint_position = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.joint_velocity = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.torque_reading = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.joint_acceleration = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 16
      self.foot_contact_force = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 16
      self.foot_contact_detected = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=4)
      start = end
      end += 16
      self.foot_contact_probability = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=4)
      start = end
      end += 48
      self.foot_position_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 48
      self.foot_velocity_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=12)
      start = end
      end += 576
      self.foot_jacobian_in_body = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=144)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_144f = None
def _get_struct_144f():
    global _struct_144f
    if _struct_144f is None:
        _struct_144f = struct.Struct("<144f")
    return _struct_144f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f
