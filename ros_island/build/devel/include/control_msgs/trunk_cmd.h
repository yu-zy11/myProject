// Generated by gencpp from file control_msgs/trunk_cmd.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_TRUNK_CMD_H
#define CONTROL_MSGS_MESSAGE_TRUNK_CMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct trunk_cmd_
{
  typedef trunk_cmd_<ContainerAllocator> Type;

  trunk_cmd_()
    : header()
    , trunk_position_cmd()
    , trunk_velocity_cmd()
    , trunk_acc_cmd()
    , trunk_kp()
    , trunk_kd()  {
      trunk_position_cmd.assign(0.0);

      trunk_velocity_cmd.assign(0.0);

      trunk_acc_cmd.assign(0.0);

      trunk_kp.assign(0.0);

      trunk_kd.assign(0.0);
  }
  trunk_cmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trunk_position_cmd()
    , trunk_velocity_cmd()
    , trunk_acc_cmd()
    , trunk_kp()
    , trunk_kd()  {
  (void)_alloc;
      trunk_position_cmd.assign(0.0);

      trunk_velocity_cmd.assign(0.0);

      trunk_acc_cmd.assign(0.0);

      trunk_kp.assign(0.0);

      trunk_kd.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 6>  _trunk_position_cmd_type;
  _trunk_position_cmd_type trunk_position_cmd;

   typedef boost::array<float, 6>  _trunk_velocity_cmd_type;
  _trunk_velocity_cmd_type trunk_velocity_cmd;

   typedef boost::array<float, 6>  _trunk_acc_cmd_type;
  _trunk_acc_cmd_type trunk_acc_cmd;

   typedef boost::array<float, 6>  _trunk_kp_type;
  _trunk_kp_type trunk_kp;

   typedef boost::array<float, 6>  _trunk_kd_type;
  _trunk_kd_type trunk_kd;





  typedef boost::shared_ptr< ::control_msgs::trunk_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::trunk_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct trunk_cmd_

typedef ::control_msgs::trunk_cmd_<std::allocator<void> > trunk_cmd;

typedef boost::shared_ptr< ::control_msgs::trunk_cmd > trunk_cmdPtr;
typedef boost::shared_ptr< ::control_msgs::trunk_cmd const> trunk_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::trunk_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::trunk_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::trunk_cmd_<ContainerAllocator1> & lhs, const ::control_msgs::trunk_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trunk_position_cmd == rhs.trunk_position_cmd &&
    lhs.trunk_velocity_cmd == rhs.trunk_velocity_cmd &&
    lhs.trunk_acc_cmd == rhs.trunk_acc_cmd &&
    lhs.trunk_kp == rhs.trunk_kp &&
    lhs.trunk_kd == rhs.trunk_kd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::trunk_cmd_<ContainerAllocator1> & lhs, const ::control_msgs::trunk_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::trunk_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::trunk_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::trunk_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::trunk_cmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::trunk_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::trunk_cmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::trunk_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9c7edd9abee115da7ddc97ab8e181c2e";
  }

  static const char* value(const ::control_msgs::trunk_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9c7edd9abee115daULL;
  static const uint64_t static_value2 = 0x7ddc97ab8e181c2eULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::trunk_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/trunk_cmd";
  }

  static const char* value(const ::control_msgs::trunk_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::trunk_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#topic:'motion/trunk/cmd'\n"
"Header header\n"
"\n"
"float32[6] trunk_position_cmd\n"
"float32[6] trunk_velocity_cmd\n"
"float32[6] trunk_acc_cmd\n"
"float32[6] trunk_kp\n"
"float32[6] trunk_kd\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::trunk_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::trunk_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trunk_position_cmd);
      stream.next(m.trunk_velocity_cmd);
      stream.next(m.trunk_acc_cmd);
      stream.next(m.trunk_kp);
      stream.next(m.trunk_kd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trunk_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::trunk_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::trunk_cmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trunk_position_cmd[]" << std::endl;
    for (size_t i = 0; i < v.trunk_position_cmd.size(); ++i)
    {
      s << indent << "  trunk_position_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trunk_position_cmd[i]);
    }
    s << indent << "trunk_velocity_cmd[]" << std::endl;
    for (size_t i = 0; i < v.trunk_velocity_cmd.size(); ++i)
    {
      s << indent << "  trunk_velocity_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trunk_velocity_cmd[i]);
    }
    s << indent << "trunk_acc_cmd[]" << std::endl;
    for (size_t i = 0; i < v.trunk_acc_cmd.size(); ++i)
    {
      s << indent << "  trunk_acc_cmd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trunk_acc_cmd[i]);
    }
    s << indent << "trunk_kp[]" << std::endl;
    for (size_t i = 0; i < v.trunk_kp.size(); ++i)
    {
      s << indent << "  trunk_kp[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trunk_kp[i]);
    }
    s << indent << "trunk_kd[]" << std::endl;
    for (size_t i = 0; i < v.trunk_kd.size(); ++i)
    {
      s << indent << "  trunk_kd[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.trunk_kd[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_TRUNK_CMD_H
