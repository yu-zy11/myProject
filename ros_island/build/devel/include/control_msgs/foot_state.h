// Generated by gencpp from file control_msgs/foot_state.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_FOOT_STATE_H
#define CONTROL_MSGS_MESSAGE_FOOT_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct foot_state_
{
  typedef foot_state_<ContainerAllocator> Type;

  foot_state_()
    : header()
    , foot_position()
    , foot_velocity()
    , contact_state()
    , foot_force()  {
      foot_position.assign(0.0);

      foot_velocity.assign(0.0);

      contact_state.assign(0.0);

      foot_force.assign(0.0);
  }
  foot_state_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , foot_position()
    , foot_velocity()
    , contact_state()
    , foot_force()  {
  (void)_alloc;
      foot_position.assign(0.0);

      foot_velocity.assign(0.0);

      contact_state.assign(0.0);

      foot_force.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array<float, 12>  _foot_position_type;
  _foot_position_type foot_position;

   typedef boost::array<float, 12>  _foot_velocity_type;
  _foot_velocity_type foot_velocity;

   typedef boost::array<float, 4>  _contact_state_type;
  _contact_state_type contact_state;

   typedef boost::array<float, 12>  _foot_force_type;
  _foot_force_type foot_force;





  typedef boost::shared_ptr< ::control_msgs::foot_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::foot_state_<ContainerAllocator> const> ConstPtr;

}; // struct foot_state_

typedef ::control_msgs::foot_state_<std::allocator<void> > foot_state;

typedef boost::shared_ptr< ::control_msgs::foot_state > foot_statePtr;
typedef boost::shared_ptr< ::control_msgs::foot_state const> foot_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::foot_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::foot_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::control_msgs::foot_state_<ContainerAllocator1> & lhs, const ::control_msgs::foot_state_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.foot_position == rhs.foot_position &&
    lhs.foot_velocity == rhs.foot_velocity &&
    lhs.contact_state == rhs.contact_state &&
    lhs.foot_force == rhs.foot_force;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::control_msgs::foot_state_<ContainerAllocator1> & lhs, const ::control_msgs::foot_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace control_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::control_msgs::foot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::foot_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::foot_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::foot_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::foot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::foot_state_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::foot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed2e25b8bdf234bee1b653ec362f2558";
  }

  static const char* value(const ::control_msgs::foot_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed2e25b8bdf234beULL;
  static const uint64_t static_value2 = 0xe1b653ec362f2558ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::foot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/foot_state";
  }

  static const char* value(const ::control_msgs::foot_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::foot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#topic:'motion/foot/state'\n"
"Header header\n"
"\n"
"float32[12] foot_position\n"
"float32[12] foot_velocity\n"
"float32[4]  contact_state\n"
"float32[12] foot_force\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::control_msgs::foot_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::foot_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.foot_position);
      stream.next(m.foot_velocity);
      stream.next(m.contact_state);
      stream.next(m.foot_force);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct foot_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::foot_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::foot_state_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "foot_position[]" << std::endl;
    for (size_t i = 0; i < v.foot_position.size(); ++i)
    {
      s << indent << "  foot_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_position[i]);
    }
    s << indent << "foot_velocity[]" << std::endl;
    for (size_t i = 0; i < v.foot_velocity.size(); ++i)
    {
      s << indent << "  foot_velocity[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_velocity[i]);
    }
    s << indent << "contact_state[]" << std::endl;
    for (size_t i = 0; i < v.contact_state.size(); ++i)
    {
      s << indent << "  contact_state[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.contact_state[i]);
    }
    s << indent << "foot_force[]" << std::endl;
    for (size_t i = 0; i < v.foot_force.size(); ++i)
    {
      s << indent << "  foot_force[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.foot_force[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_FOOT_STATE_H
