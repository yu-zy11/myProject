# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_msgs/trunk_cmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class trunk_cmd(genpy.Message):
  _md5sum = "9c7edd9abee115da7ddc97ab8e181c2e"
  _type = "control_msgs/trunk_cmd"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """#topic:'motion/trunk/cmd'
Header header

float32[6] trunk_position_cmd
float32[6] trunk_velocity_cmd
float32[6] trunk_acc_cmd
float32[6] trunk_kp
float32[6] trunk_kd

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','trunk_position_cmd','trunk_velocity_cmd','trunk_acc_cmd','trunk_kp','trunk_kd']
  _slot_types = ['std_msgs/Header','float32[6]','float32[6]','float32[6]','float32[6]','float32[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,trunk_position_cmd,trunk_velocity_cmd,trunk_acc_cmd,trunk_kp,trunk_kd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(trunk_cmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trunk_position_cmd is None:
        self.trunk_position_cmd = [0.] * 6
      if self.trunk_velocity_cmd is None:
        self.trunk_velocity_cmd = [0.] * 6
      if self.trunk_acc_cmd is None:
        self.trunk_acc_cmd = [0.] * 6
      if self.trunk_kp is None:
        self.trunk_kp = [0.] * 6
      if self.trunk_kd is None:
        self.trunk_kd = [0.] * 6
    else:
      self.header = std_msgs.msg.Header()
      self.trunk_position_cmd = [0.] * 6
      self.trunk_velocity_cmd = [0.] * 6
      self.trunk_acc_cmd = [0.] * 6
      self.trunk_kp = [0.] * 6
      self.trunk_kd = [0.] * 6

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_6f().pack(*self.trunk_position_cmd))
      buff.write(_get_struct_6f().pack(*self.trunk_velocity_cmd))
      buff.write(_get_struct_6f().pack(*self.trunk_acc_cmd))
      buff.write(_get_struct_6f().pack(*self.trunk_kp))
      buff.write(_get_struct_6f().pack(*self.trunk_kd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.trunk_position_cmd = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.trunk_velocity_cmd = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.trunk_acc_cmd = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.trunk_kp = _get_struct_6f().unpack(str[start:end])
      start = end
      end += 24
      self.trunk_kd = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.trunk_position_cmd.tostring())
      buff.write(self.trunk_velocity_cmd.tostring())
      buff.write(self.trunk_acc_cmd.tostring())
      buff.write(self.trunk_kp.tostring())
      buff.write(self.trunk_kd.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 24
      self.trunk_position_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.trunk_velocity_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.trunk_acc_cmd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.trunk_kp = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      start = end
      end += 24
      self.trunk_kd = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=6)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
